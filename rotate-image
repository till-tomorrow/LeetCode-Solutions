## PROBLEM DESCRIPTION: https://leetcode.com/problems/rotate-image/

class Solution {
    //This function swaps 2 elements at indices 
    //index1a, index1b and index2a, index2 respectively
    //Time complexity : O(1)
    void swapElements(vector<vector<int>>& matrix, 
                      int index1a, int index1b, 
                      int index2a, int index2b) {
        int temp = matrix[index1a][index1b];
        matrix[index1a][index1b] = matrix[index2a][index2b];
        matrix[index2a][index2b] = temp;
    }
    
    //Time Complexity : O(N) 
    //where, N is the sqaure matrix dimension
    void swapRows(vector<vector<int>>& matrix, int rowNum1, int rowNum2) {
        int numRows = matrix.size();
        for (int i = 0; i < numRows; i++) {
            swapElements(matrix, rowNum1, i, rowNum2, i);
        }
    }
    
public:
    //Time Complexity : O(N^2)
    void rotate(vector<vector<int>>& matrix) {
        //turn the matrix upside down
        int numRows = matrix.size();    //O(1) time operation
        //Time Complexity : O(N*N) 
        //because the time complexity of swapRows() is O(N)
        for (int i = 0; i < numRows/2; i++) { 
            swapRows(matrix, i, numRows - i - 1);
        }
        
        //transpose of the matrix is the rotated image 
        //i.e., clockwise 90 degree rotation
        //Time Complexity : O(N*N)
        for (int i = 0; i < matrix.size(); i++) { 
            for (int j = 0; j < matrix[i].size(); j++) 
                if(j > i)
                    swapElements(matrix, i, j, j, i); 
        } 
        
        //printing the result matrix
        // for (int i = 0; i < matrix.size(); i++) { 
        //     for (int j = 0; j < matrix[i].size(); j++) 
        //         cout << matrix[i][j] << " "; 
        //     cout << endl; 
        // } 
    }
};
